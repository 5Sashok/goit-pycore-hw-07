from collections import UserDict
import re
from datetime import datetime, timedelta

# === Field ===
class Field:
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return str(self.value)

# === Name ===
class Name(Field):
    pass

# === Phone ===
class Phone(Field):
    def __init__(self, value):
        if not re.fullmatch(r"\d{10}", value):
            raise ValueError("Phone number must be exactly 10 digits.")
        super().__init__(value)

# === Birthday ===
class Birthday(Field):
    def __init__(self, value):
        try:
            parsed_date = datetime.strptime(value, "%d.%m.%Y")
        except ValueError:
            raise ValueError("Invalid date format. Use DD.MM.YYYY")
        super().__init__(parsed_date)

# === Record ===
class Record:
    def __init__(self, name):
        self.name = Name(name)
        self.phones = []
        self.birthday = None

    def add_phone(self, phone_number):
        phone = Phone(phone_number)
        self.phones.append(phone)

    def remove_phone(self, phone_number):
        for phone in self.phones:
            if phone.value == phone_number:
                self.phones.remove(phone)
                return True
        return False

    def edit_phone(self, old_number, new_number):
        for i, phone in enumerate(self.phones):
            if phone.value == old_number:
                self.phones[i] = Phone(new_number)
                return True
        return False

    def find_phone(self, phone_number):
        for phone in self.phones:
            if phone.value == phone_number:
                return phone
        return None

    def add_birthday(self, birthday):
        self.birthday = Birthday(birthday)

    def __str__(self):
        phones = '; '.join(p.value for p in self.phones)
        bday = self.birthday.value.strftime('%d.%m.%Y') if self.birthday else "N/A"
        return f"Contact name: {self.name.value}, phones: {phones}, birthday: {bday}"

# === AddressBook ===
class AddressBook(UserDict):
    def add_record(self, record):
        self.data[record.name.value] = record

    def find(self, name):
        return self.data.get(name)

    def delete(self, name):
        if name in self.data:
            del self.data[name]
            return True
        return False

    def get_upcoming_birthdays(self):
        today = datetime.today().date()
        next_week = today + timedelta(days=7)
        result = []
        for record in self.data.values():
            if record.birthday:
                bday_this_year = record.birthday.value.replace(year=today.year).date()
                if today <= bday_this_year <= next_week:
                    result.append(f"{record.name.value}: {bday_this_year.strftime('%d.%m')}")
        return result

# === Тестування ===
if __name__ == "__main__":
    book = AddressBook()

    john_record = Record("John")
    john_record.add_phone("1234567890")
    john_record.add_phone("5555555555")
    john_record.add_birthday("20.07.1990")
    book.add_record(john_record)

    jane_record = Record("Jane")
    jane_record.add_phone("9876543210")
    jane_record.add_birthday("15.07.1985")
    book.add_record(jane_record)

    print("\n== Всі записи ==")
    for name, record in book.data.items():
        print(record)

    john = book.find("John")
    john.edit_phone("1234567890", "1112223333")
    print("\n== Після редагування ==")
    print(john)

    found_phone = john.find_phone("5555555555")
    print(f"\n== Знайдений номер у John: {john.name}: {found_phone}")

    book.delete("Jane")
    print("\n== Після видалення Jane ==")
    for name, record in book.data.items():
        print(record)

    print("\n== Привітання на наступному тижні ==")
    for birthday in book.get_upcoming_birthdays():
        print(birthday)
